{"version":3,"sources":["components/SearchBar/SearchBar.js","actions/types.js","reducers/resultsReducer.js","Store.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","handleSubmit","bind","state","searchResults","e","preventDefault","term","this","inputValue","fetch","method","then","res","json","data","setState","hits","searchedResults","map","result","i","className","author","title","url","onSubmit","value","onChange","inputChange","type","React","Component","connect","dispatch","action","text","target","INPUT_CHANGE","initialState","store","createStore","App","Store","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAIMA,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACTC,cAAe,IAJJ,E,yDAONC,GAAI,IAAD,OACZA,EAAEC,iBACF,IAAIC,EAAOC,KAAKR,MAAMS,WACtBC,MAAM,8CAAD,OAA+CH,GAAQ,CAAEI,OAAQ,QACjEC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAAEZ,cAAeW,EAAKE,Y,+BAItD,IAAMC,EAAkBV,KAAKL,MAAMC,cAAce,KAAI,SAACC,EAAQC,GAC1D,OAAO,gCAAa,sBAAMC,UAAU,SAAhB,SAA0BF,EAAOG,SACjD,mBAAGD,UAAU,QAAb,SAAsBF,EAAOI,QAC7B,sBAAMF,UAAU,MAAhB,SAAuBF,EAAOK,QAFjBJ,MAIrB,OAAO,qCACH,qBAAKC,UAAU,OAAf,SACI,uBAAMI,SAAUlB,KAAKP,aAArB,UACI,uBAAO0B,MAAOnB,KAAKR,MAAMS,WAAYmB,SAAUpB,KAAKR,MAAM6B,YAAaC,KAAK,SAC5E,wBAAQR,UAAU,SAASQ,KAAK,SAAhC,yBAGR,yCACA,8BAAMZ,W,GA9BMa,IAAMC,WAkDfC,eAfS,SAAA9B,GACpB,MAAO,CACHM,WAAYN,EAAMM,eAIC,SAAAyB,GACvB,MAAO,CACHL,YAAa,SAACxB,GACV,IAAM8B,EAAS,CAAEL,KAAM,eAAgBM,KAAM/B,EAAEgC,OAAOV,OACtDO,EAASC,OAKNF,CAA6ClC,G,OCtD/CuC,EAAe,eCItBC,EAAe,CACjB9B,WAAY,ICFhB,IAOe+B,EAFDC,aDAC,WAAgD,IAA/BtC,EAA8B,uDAAtBoC,EAAcJ,EAAQ,uCAC1D,OAAQA,EAAOL,MACX,KAAKQ,EACD,MAAO,CACH7B,WAAY0B,EAAOC,MAEvB,QACI,OAAOjC,KCZF,CACjBM,WAAY,KCeDiC,E,uKARX,OAAO,cAAC,IAAD,CAAUF,MAAOG,EAAjB,SAAwB,qBAAKrB,UAAU,MAAf,SAC7B,cAAC,EAAD,Y,GALYS,IAAMC,WCKTY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4f7bdbea.chunk.js","sourcesContent":["import React from 'react';\nimport './SearchBar.css'\nimport { connect } from 'react-redux';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.state = {\n            searchResults: []\n        }\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        let term = this.props.inputValue;\n        fetch(`https://hn.algolia.com/api/v1/search?query=${term}`, { method: 'GET' })\n            .then(res => res.json())\n            .then(data => this.setState({ searchResults: data.hits }));\n    }\n\n    render() {\n        const searchedResults = this.state.searchResults.map((result, i) => {\n            return <div key={i}><span className=\"author\">{result.author}</span>\n                <p className=\"title\">{result.title}</p>\n                <span className=\"url\">{result.url}</span></div>\n        })\n        return <>\n            <div className=\"form\">\n                <form onSubmit={this.handleSubmit}>\n                    <input value={this.props.inputValue} onChange={this.props.inputChange} type=\"text\"></input>\n                    <button className=\"button\" type=\"submit\">search</button>\n                </form>\n            </div>\n            <h1>Results</h1>\n            <div>{searchedResults}</div>\n        </>\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        inputValue: state.inputValue\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        inputChange: (e) => {\n            const action = { type: 'INPUT_CHANGE', text: e.target.value };\n            dispatch(action);\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","export const INPUT_CHANGE = 'INPUT_CHANGE';","import {\n    INPUT_CHANGE\n} from '../actions/types';\n\nconst initialState = {\n    inputValue: ''\n}\n\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case INPUT_CHANGE:\n            return {\n                inputValue: action.text\n            }\n            default:\n                return state;\n    }\n}\n\n","import { createStore } from 'redux'\nimport resultsReducer from './reducers/resultsReducer'\n\nconst initialState = {\n    inputValue: ''\n}\n\n\nconst store = createStore(resultsReducer, initialState);\n\nexport default store;","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar/SearchBar.js';\nimport { Provider } from 'react-redux'\nimport Store from './Store';\n\n\nclass App extends React.Component {\n\n\n  render() {\n    return <Provider store={Store}><div className=\"App\">\n      <SearchBar />\n    </div>\n    </Provider>\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}